diff --git a/drivers/tty/vt/keyboard.c b/drivers/tty/vt/keyboard.c
index 5dde19de..8a89f6e7 100644
--- a/drivers/tty/vt/keyboard.c
+++ b/drivers/tty/vt/keyboard.c
@@ -120,15 +120,10 @@ static const int NR_TYPES = ARRAY_SIZE(max_vals);
 static struct input_handler kbd_handler;
 static DEFINE_SPINLOCK(kbd_event_lock);
 static DEFINE_SPINLOCK(led_lock);
-static DEFINE_SPINLOCK(func_buf_lock); /* guard 'func_buf'  and friends */
 static unsigned long key_down[BITS_TO_LONGS(KEY_CNT)];	/* keyboard key bitmap */
 static unsigned char shift_down[NR_SHIFT];		/* shift state counters.. */
 static bool dead_key_next;
-
-/* Handles a number being assembled on the number pad */
-static bool npadch_active;
-static unsigned int npadch_value;
-
+static int npadch = -1;					/* -1 or number assembled on pad */
 static unsigned int diacr;
 static char rep;					/* flag telling character repeat */
 
@@ -370,22 +365,34 @@ static void to_utf8(struct vc_data *vc, uint c)
 
 static void do_compute_shiftstate(void)
 {
-	unsigned int k, sym, val;
+	unsigned int i, j, k, sym, val;
 
 	shift_state = 0;
 	memset(shift_down, 0, sizeof(shift_down));
 
-	for_each_set_bit(k, key_down, min(NR_KEYS, KEY_CNT)) {
-		sym = U(key_maps[0][k]);
-		if (KTYP(sym) != KT_SHIFT && KTYP(sym) != KT_SLOCK)
+	for (i = 0; i < ARRAY_SIZE(key_down); i++) {
+
+		if (!key_down[i])
 			continue;
 
-		val = KVAL(sym);
-		if (val == KVAL(K_CAPSSHIFT))
-			val = KVAL(K_SHIFT);
+		k = i * BITS_PER_LONG;
+
+		for (j = 0; j < BITS_PER_LONG; j++, k++) {
+
+			if (!test_bit(k, key_down))
+				continue;
+
+			sym = U(key_maps[0][k]);
+			if (KTYP(sym) != KT_SHIFT && KTYP(sym) != KT_SLOCK)
+				continue;
 
-		shift_down[val]++;
-		shift_state |= BIT(val);
+			val = KVAL(sym);
+			if (val == KVAL(K_CAPSSHIFT))
+				val = KVAL(K_SHIFT);
+
+			shift_down[val]++;
+			shift_state |= (1 << val);
+		}
 	}
 }
 
@@ -711,13 +718,8 @@ static void k_fn(struct vc_data *vc, unsigned char value, char up_flag)
 		return;
 
 	if ((unsigned)value < ARRAY_SIZE(func_table)) {
-		unsigned long flags;
-
-		spin_lock_irqsave(&func_buf_lock, flags);
 		if (func_table[value])
 			puts_queue(vc, func_table[value]);
-		spin_unlock_irqrestore(&func_buf_lock, flags);
-
 	} else
 		pr_err("k_fn called with value=%d\n", value);
 }
@@ -823,12 +825,12 @@ static void k_shift(struct vc_data *vc, unsigned char value, char up_flag)
 		shift_state &= ~(1 << value);
 
 	/* kludge */
-	if (up_flag && shift_state != old_state && npadch_active) {
+	if (up_flag && shift_state != old_state && npadch != -1) {
 		if (kbd->kbdmode == VC_UNICODE)
-			to_utf8(vc, npadch_value);
+			to_utf8(vc, npadch);
 		else
-			put_queue(vc, npadch_value & 0xff);
-		npadch_active = false;
+			put_queue(vc, npadch & 0xff);
+		npadch = -1;
 	}
 }
 
@@ -846,7 +848,7 @@ static void k_meta(struct vc_data *vc, unsigned char value, char up_flag)
 
 static void k_ascii(struct vc_data *vc, unsigned char value, char up_flag)
 {
-	unsigned int base;
+	int base;
 
 	if (up_flag)
 		return;
@@ -860,12 +862,10 @@ static void k_ascii(struct vc_data *vc, unsigned char value, char up_flag)
 		base = 16;
 	}
 
-	if (!npadch_active) {
-		npadch_value = 0;
-		npadch_active = true;
-	}
-
-	npadch_value = npadch_value * base + value;
+	if (npadch == -1)
+		npadch = value;
+	else
+		npadch = npadch * base + value;
 }
 
 static void k_lock(struct vc_data *vc, unsigned char value, char up_flag)
@@ -961,122 +961,6 @@ static void k_brl(struct vc_data *vc, unsigned char value, char up_flag)
 	}
 }
 
-#if IS_ENABLED(CONFIG_INPUT_LEDS) && IS_ENABLED(CONFIG_LEDS_TRIGGERS)
-
-struct kbd_led_trigger {
-	struct led_trigger trigger;
-	unsigned int mask;
-};
-
-static void kbd_led_trigger_activate(struct led_classdev *cdev)
-{
-	struct kbd_led_trigger *trigger =
-		container_of(cdev->trigger, struct kbd_led_trigger, trigger);
-
-	tasklet_disable(&keyboard_tasklet);
-	if (ledstate != -1U)
-		led_trigger_event(&trigger->trigger,
-				  ledstate & trigger->mask ?
-					LED_FULL : LED_OFF);
-	tasklet_enable(&keyboard_tasklet);
-}
-
-#define KBD_LED_TRIGGER(_led_bit, _name) {			\
-		.trigger = {					\
-			.name = _name,				\
-			.activate = kbd_led_trigger_activate,	\
-		},						\
-		.mask	= BIT(_led_bit),			\
-	}
-
-#define KBD_LOCKSTATE_TRIGGER(_led_bit, _name)		\
-	KBD_LED_TRIGGER((_led_bit) + 8, _name)
-
-static struct kbd_led_trigger kbd_led_triggers[] = {
-	KBD_LED_TRIGGER(VC_SCROLLOCK, "kbd-scrolllock"),
-	KBD_LED_TRIGGER(VC_NUMLOCK,   "kbd-numlock"),
-	KBD_LED_TRIGGER(VC_CAPSLOCK,  "kbd-capslock"),
-	KBD_LED_TRIGGER(VC_KANALOCK,  "kbd-kanalock"),
-
-	KBD_LOCKSTATE_TRIGGER(VC_SHIFTLOCK,  "kbd-shiftlock"),
-	KBD_LOCKSTATE_TRIGGER(VC_ALTGRLOCK,  "kbd-altgrlock"),
-	KBD_LOCKSTATE_TRIGGER(VC_CTRLLOCK,   "kbd-ctrllock"),
-	KBD_LOCKSTATE_TRIGGER(VC_ALTLOCK,    "kbd-altlock"),
-	KBD_LOCKSTATE_TRIGGER(VC_SHIFTLLOCK, "kbd-shiftllock"),
-	KBD_LOCKSTATE_TRIGGER(VC_SHIFTRLOCK, "kbd-shiftrlock"),
-	KBD_LOCKSTATE_TRIGGER(VC_CTRLLLOCK,  "kbd-ctrlllock"),
-	KBD_LOCKSTATE_TRIGGER(VC_CTRLRLOCK,  "kbd-ctrlrlock"),
-};
-
-static void kbd_propagate_led_state(unsigned int old_state,
-				    unsigned int new_state)
-{
-	struct kbd_led_trigger *trigger;
-	unsigned int changed = old_state ^ new_state;
-	int i;
-
-	for (i = 0; i < ARRAY_SIZE(kbd_led_triggers); i++) {
-		trigger = &kbd_led_triggers[i];
-
-		if (changed & trigger->mask)
-			led_trigger_event(&trigger->trigger,
-					  new_state & trigger->mask ?
-						LED_FULL : LED_OFF);
-	}
-}
-
-static int kbd_update_leds_helper(struct input_handle *handle, void *data)
-{
-	unsigned int led_state = *(unsigned int *)data;
-
-	if (test_bit(EV_LED, handle->dev->evbit))
-		kbd_propagate_led_state(~led_state, led_state);
-
-	return 0;
-}
-
-static void kbd_init_leds(void)
-{
-	int error;
-	int i;
-
-	for (i = 0; i < ARRAY_SIZE(kbd_led_triggers); i++) {
-		error = led_trigger_register(&kbd_led_triggers[i].trigger);
-		if (error)
-			pr_err("error %d while registering trigger %s\n",
-			       error, kbd_led_triggers[i].trigger.name);
-	}
-}
-
-#else
-
-static int kbd_update_leds_helper(struct input_handle *handle, void *data)
-{
-	unsigned int leds = *(unsigned int *)data;
-
-	if (test_bit(EV_LED, handle->dev->evbit)) {
-		input_inject_event(handle, EV_LED, LED_SCROLLL, !!(leds & 0x01));
-		input_inject_event(handle, EV_LED, LED_NUML,    !!(leds & 0x02));
-		input_inject_event(handle, EV_LED, LED_CAPSL,   !!(leds & 0x04));
-		input_inject_event(handle, EV_SYN, SYN_REPORT, 0);
-	}
-
-	return 0;
-}
-
-static void kbd_propagate_led_state(unsigned int old_state,
-				    unsigned int new_state)
-{
-	input_handler_for_each_handle(&kbd_handler, &new_state,
-				      kbd_update_leds_helper);
-}
-
-static void kbd_init_leds(void)
-{
-}
-
-#endif
-
 /*
  * The leds display either (i) the status of NumLock, CapsLock, ScrollLock,
  * or (ii) whatever pattern of lights people want to show using KDSETLED,
@@ -1485,7 +1369,7 @@ static void kbd_event(struct input_handle *handle, unsigned int event_type,
 
 	if (event_type == EV_MSC && event_code == MSC_RAW && HW_RAW(handle->dev))
 		kbd_rawcode(value);
-	if (event_type == EV_KEY && event_code <= KEY_MAX)
+	if (event_type == EV_KEY)
 		kbd_keycode(event_code, value, HW_RAW(handle->dev));
 
 	spin_unlock(&kbd_event_lock);
@@ -1986,17 +1870,18 @@ out:
 #undef s
 #undef v
 
-/* FIXME: This one needs untangling */
+/* FIXME: This one needs untangling and locking */
 int vt_do_kdgkb_ioctl(int cmd, struct kbsentry __user *user_kdgkb, int perm)
 {
 	struct kbsentry *kbs;
+	char *p;
 	u_char *q;
-	int sz, fnw_sz;
+	u_char __user *up;
+	int sz;
 	int delta;
 	char *first_free, *fj, *fnw;
 	int i, j, k;
 	int ret;
-	unsigned long flags;
 
 	if (!capable(CAP_SYS_TTY_CONFIG))
 		perm = 0;
@@ -2016,33 +1901,30 @@ int vt_do_kdgkb_ioctl(int cmd, struct kbsentry __user *user_kdgkb, int perm)
 	i = kbs->kb_func;
 
 	switch (cmd) {
-	case KDGKBSENT: {
-		/* size should have been a struct member */
-		ssize_t len = sizeof(user_kdgkb->kb_string);
-
-		spin_lock_irqsave(&func_buf_lock, flags);
-		len = strlcpy(kbs->kb_string, func_table[i] ? : "", len);
-		spin_unlock_irqrestore(&func_buf_lock, flags);
-
-		ret = copy_to_user(user_kdgkb->kb_string, kbs->kb_string,
-				len + 1) ? -EFAULT : 0;
-
-		goto reterr;
-	}
+	case KDGKBSENT:
+		sz = sizeof(kbs->kb_string) - 1; /* sz should have been
+						  a struct member */
+		up = user_kdgkb->kb_string;
+		p = func_table[i];
+		if(p)
+			for ( ; *p && sz; p++, sz--)
+				if (put_user(*p, up++)) {
+					ret = -EFAULT;
+					goto reterr;
+				}
+		if (put_user('\0', up)) {
+			ret = -EFAULT;
+			goto reterr;
+		}
+		kfree(kbs);
+		return ((p && *p) ? -EOVERFLOW : 0);
 	case KDSKBSENT:
 		if (!perm) {
 			ret = -EPERM;
 			goto reterr;
 		}
 
-		fnw = NULL;
-		fnw_sz = 0;
-		/* race aginst other writers */
-		again:
-		spin_lock_irqsave(&func_buf_lock, flags);
 		q = func_table[i];
-
-		/* fj pointer to next entry after 'q' */
 		first_free = funcbufptr + (funcbufsize - funcbufleft);
 		for (j = i+1; j < MAX_NR_FUNC && !func_table[j]; j++)
 			;
@@ -2050,12 +1932,10 @@ int vt_do_kdgkb_ioctl(int cmd, struct kbsentry __user *user_kdgkb, int perm)
 			fj = func_table[j];
 		else
 			fj = first_free;
-		/* buffer usage increase by new entry */
-		delta = (q ? -strlen(q) : 1) + strlen(kbs->kb_string);
 
+		delta = (q ? -strlen(q) : 1) + strlen(kbs->kb_string);
 		if (delta <= funcbufleft) { 	/* it fits in current buf */
 		    if (j < MAX_NR_FUNC) {
-			/* make enough space for new entry at 'fj' */
 			memmove(fj + delta, fj, first_free - fj);
 			for (k = j; k < MAX_NR_FUNC; k++)
 			    if (func_table[k])
@@ -2068,28 +1948,20 @@ int vt_do_kdgkb_ioctl(int cmd, struct kbsentry __user *user_kdgkb, int perm)
 		    sz = 256;
 		    while (sz < funcbufsize - funcbufleft + delta)
 		      sz <<= 1;
-		    if (fnw_sz != sz) {
-		      spin_unlock_irqrestore(&func_buf_lock, flags);
-		      kfree(fnw);
-		      fnw = kmalloc(sz, GFP_KERNEL);
-		      fnw_sz = sz;
-		      if (!fnw) {
-			ret = -ENOMEM;
-			goto reterr;
-		      }
-		      goto again;
+		    fnw = kmalloc(sz, GFP_KERNEL);
+		    if(!fnw) {
+		      ret = -ENOMEM;
+		      goto reterr;
 		    }
 
 		    if (!q)
 		      func_table[i] = fj;
-		    /* copy data before insertion point to new location */
 		    if (fj > funcbufptr)
 			memmove(fnw, funcbufptr, fj - funcbufptr);
 		    for (k = 0; k < j; k++)
 		      if (func_table[k])
 			func_table[k] = fnw + (func_table[k] - funcbufptr);
 
-		    /* copy data after insertion point to new location */
 		    if (first_free > fj) {
 			memmove(fnw + (fj - funcbufptr) + delta, fj, first_free - fj);
 			for (k = j; k < MAX_NR_FUNC; k++)
@@ -2102,9 +1974,7 @@ int vt_do_kdgkb_ioctl(int cmd, struct kbsentry __user *user_kdgkb, int perm)
 		    funcbufleft = funcbufleft - delta + sz - funcbufsize;
 		    funcbufsize = sz;
 		}
-		/* finally insert item itself */
 		strcpy(func_table[i], kbs->kb_string);
-		spin_unlock_irqrestore(&func_buf_lock, flags);
 		break;
 	}
 	ret = 0;
